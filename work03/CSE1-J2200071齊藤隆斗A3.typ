#set page(
  paper: "us-letter",
  numbering: "1",
)

#set par(justify: true)
#set text(
	lang: "ja",
	font: ("Linux Libertine", "Harano Aji Mincho"),
	size: 11pt,
)

#align(center + horizon, text(17pt)[
	*情報科学実験1 \
	3.カウンタの設計*
])

#align(center + horizon, text[
	実験グループ: A班 \
	報告者: J2200071 齊藤 隆斗 \
	共同実験者: J2200038 小淵 萌, #h(0.3cm) J2200104 知久拓生, #h(0.3cm) J2200158 矢島 琴恵 \

	実験実施日: 2024年6月20日 \
	レポート提出日: 2024年6月 日 \
	提出期限: 2024年6月27日
])

#pagebreak()

#show figure.where(
    kind: table
): set figure.caption(position: top)

#set heading(numbering: "1.")

= 実験の目的
基本的な同期式順序回路であるカウンタを実際に構成し,その原理を理解する.


= 原理


== カウンタ

=== カウンタ

カウンタとは、クロックCLKを入力として持ち、クロックを決められた順序でカウントする同期式順序回路である.
カウンタの動作は、状態遷移表を使って書ける. 現在時刻$t$での出力を$Q_2, Q_1, Q_0$, 時刻$t + 1$での出力を$Q_2^+, Q_1^+, Q_0^+$とする.
このとき、8進カウンタの状態遷移表は @8table のようになる.
ここで、時刻 $t+1$ とは、時刻 $t$ の後にクロックパルスが1回入力されたときの時刻のことである.


#figure(
  table(
    columns: 6,
	stroke: (x:none),
	row-gutter: (2.2pt, auto),
    table.header[$Q_2$][$Q_1$][$Q_0$][$Q_2^+$][$Q_1^+$][$Q_0^+$],
	[0], [0], [0], [0], [0], [1],
	[0], [0], [1], [0], [1], [0],
	[0], [1], [0], [0], [1], [1],
	[0], [1], [1], [1], [0], [0],
	[1], [0], [0], [1], [0], [1],
	[1], [0], [1], [1], [1], [0],
	[1], [1], [0], [1], [1], [1],
	[1], [1], [1], [0], [0], [0],
  ),
  caption: [8進カウンタの状態遷移表],
) <8table>



=== イネーブル付きカウンタ

イネーブル付きカウンタとは、クロックパルス以外に入力ENを持つ. 
$text("EN" = 1)$の時に入力されたクロックパルスのみをカウントするカウンタである.


=== アップダウンカウンタ

アップダウンカウンタの入力はクロックパルスCLKと1bitの信号UPの2つである.
$text("UP") = 1$ の時、CLKが入力されるたびに出力が増加する. 
逆に、$text("UP") = 0$ の時、CLKが入力されるたびに出力が減少する.


= 実験方法
ロジックトレーナを用いてそれぞれのカウンタの回路を設計し、
カウンタの挙動をタイミングチャート及び状態遷移表によって確認した.




= 実験結果

== 8進カウンタの実装と確認
イネーブル付き 8 進カウンタの回路図と,作成したタイミングチャートを示すこと.
タイミングチャートは

- クロックパルスに同期して,すべてのフリップフロップが正しく動作しているか?
- 0 から 7 まで正しくカウントしているか?
- EN が 1 のときのみカウントするようになっているか?
- 7 の次は 0 に戻るようにカウントしているか?
といった,カウンタとしての動作を正しく行っていることを確認できるチャートを作ること.

== 5進カウンタの設計と実装
作成した手順を詳しく説明し,回路図と作成したタイミングチャートを示すこと.8 進カウンタのときと同じく,
正しく動作することが確認できるチャートを作ること.


== 8進アップダウンカウンタの設計と実装
作成した手順を詳しく説明し,回路図と作成したタイミン
グチャートを示すこと.8 進カウンタのときと同じく,正しく動作することが確認できる
チャートを作ること.


= 考察

== 課題(1) 
実験で 5 進カウンタを作成した.この 5 進カウンタでは,出力として 101,110,111
は現れない.もし,D フリップフロップの状態がこれらの値になったとしたら,自分たち
が作成した回路では,その後どのように出力が変化するかを調べよ.(実際の回路では,
電源投入直後などにフリップフロップの値が不定となるため,このような回路設計で想定
しない状態になることがありうる.)


- 作成した論理式から、
  $text("EN") = 0$ のときは $101 -> 101$, $110 -> 110$, $111 -> 111$
  $text("EN") = 1$ のときは $101 -> 010$, $110 -> 010$, $111 -> 100$
  となるから、$text("EN") = 0$のときは状態を保持し、$text("EN") = 1$のときはカウンタとして期待している動作が行われていないことがわかる.
  $text("EN") = 1$ でクロックパルスが入力された後の変化はそれぞれ、$010, 010, 100$が状態遷移前の状態となるからこの後は通常のサイクルが繰り返される.



== 課題(2) 
ジョンソンカウンタ,リングカウンタについて調べてレポートにまとめること. それら以外にも,どのようなカウンタがあるだろうか?

- ジョンソンカウンタは、特にシフトレジスタを利用して特定のパターンで状態を変化させるカウンタである.
  このカウンタは、Nビットのシフトレジスタを用いて2Nの状態を生成し、2進数のカウンタとなる.
  例として4bitのジョンソンカウンタについて考える.
  クロックパルスが入力されるごとに、すべてのビットが一つずつ右にシフトし、
  最初のフリップフロップには反転された最終ビットが入る.
  これにより、状態は以下のように変化する.
  0000 $->$ 1000 $->$ 1100 $->$ 1110 $->$ 1111 $->$ 0111 $->$ 0011 $->$ 0001 $->$ 0000


このように $ 4 text("bit") dot 2 = 8 text("bit")$ の状態を持つことがわかる.


- リングカウンタは、シフトレジスタを用いて構成されるカウンタである.
  シフトレジスタの出力がリング状に循環するように接続されているため、リングカウンタと呼ばれる.
  4bitの場合、このカウンタは4つの状態を生成し、4進数のカウンタとなる.
  4bitの場合、このカウンタの動きについて見ていくと次のようになる.
  まず、リングカウンタを初期化する際には、1つのフリップフロップの出力を1、他のフリップフロップの出力を0に設定する.
  例えば、4ビットのリングカウンタでは初期状態が1000になるように設定する.
  クロックパルスが入力されるごとに、各フリップフロップの出力が右隣のフリップフロップにシフトされる. 初期状態1000から1つのクロックパルスが入力されると、0100となり、次に0010、その次に0001と移っていく.
  最後のフリップフロップの出力が最初のフリップフロップにフィードバックされることで、カウンタの状態が再び1000に戻り、この循環が繰り返される.




= 参考文献
[1]情報科学実験Iテキスト2024年 \
[2]wikipedia: リングカウンタ https://www.wikiwand.com/ja/%E3%83%AA%E3%83%B3%E3%82%B0%E3%82%AB%E3%82%A6%E3%83%B3%E3%82%BF
